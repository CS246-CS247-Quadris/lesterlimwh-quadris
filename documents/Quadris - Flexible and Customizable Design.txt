Question:
In your final design document, outline the ways in which your design accommodates
new features and changes to existing features. Be specific. You may wish to implement some of these for extra credit.

Answer:
Accomodation of new features and changes to existing features:

To accomodate for potential new features and changes to existing features, we have designed our program with customizability and flexibility in mind. The goal is that we should be able to easily customized the program without breaking the logic of the existing code. Examples of potential new features are adding new levels and adding a feature such that the block is constantly dropping by one row (similar to the classic Tetris game), whereas potential changes to current features could be implementing a grid with a different size, a different scoring system, different block orientations and changing the way blocks are randomized. 

For simple enhancements such as implementing a grid of different dimensions, we can simply specify any dimensions larger than 4x4 (at least the size of a block) in the Level class, where grid is initialized. Since the blocks are always checked for validity (by obtaining the new coordinates and checking for clashes in the grid) before they are manipulated, altering the size of the grid will not affect the pre-existing logic. Similarly, Adding a new level simply means adding a new switch statement in Level's public method, makeblock, alongside an algorithm for generating the blocks and the rest falls into place naturally.

Even for advanced, CPU heavy features such as having blocks drop by one row constantly with a specific time interval in between each drop, the program's design mindset of customizability and flexibility still holds. In other words, majority of the existing core logic can remain the same for the new feature to work. In this case, it should not be necessary to write new methods for manipulating these constantly moving blocks - we simply need to implement a time delayed loop after making a block (in Level's public method, makeblock) that calls the block's public method, down, until the block is placed or is out of the grid (game over). We can clearly see that the main functions for performing the block movement have not changed and the only thing we added was a time delayed loop.

From this discussion, we have shown that our Quadris design caters for new features and changes to existing features.      